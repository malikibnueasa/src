#!/usr/bin/env python3

import math
import rospy
from std_msgs.msg import Int16, Float64

# def mover():
#     pub_j1 = rospy.Publisher('/moveit_com/command',Int16, queue_size=10)
    
#     rospy.init_node('prediction_node')
#     rate = rospy.Rate(10)
#     start_time = 0

#     while not start_time:
#         start_time = rospy.Time.now().to_sec()

#     while not rospy.is_shutdown():
#         elapsed = rospy.Time.now().to_sec() - start_time
#         pub_j1.publish(math.sin(2*math.pi*0.1*elapsed)*(math.pi/2))
       
#         rate.sleep()

# if __name__ == '__main__':
#     try:
#         mover()
#     except rospy.ROSInterruptException:
#         pass


def move_without_confirmation():

	rospy.init_node('prediction_node')
	current_pos = 0

	destination = int(input('Enter Table Number: '))

	pub = rospy.Publisher('/moveit_com/command',Int16, queue_size = 1)

	

	# while not rospy.is_shutdown():

	if(current_pos==0):
		data = rospy.wait_for_message("/moveit_com/commandret", Int16)
		
	elif(current_pos==1 and data):
		pub.publish(destination)
	elif(current_pos==destination):
		pub.pubish(0)
	rospy.spin()
'''
class Mover:

	def __init__(self,destination):

		rospy.init_node('prediction_node')
		self.curr_position = 0
		self.destination = destination
		self.sub = rospy.Subscriber('movebase_client_py')
		self.pub = rospy.Publisher('/moveit_com/command',Int16)

	def move(self, pos):
		
		#Move robot from curr_position to pos.

		#Args:
		#	pos: Postion to which robot should move.
			
		
		while not rospy.is_shutdown():
			if(self.curr_position==0):
				pub.publish(1)
			elif(self.curr_position==1):
				pub.publish(self.destination)
'''

if __name__ == '__main__':
	
	try:
		move_without_confirmation()
	except rospy.ROSInterruptException:
		pass