#!/usr/bin/env python3

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import sys
import copy
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import Pose,Quaternion
import rospkg
import geometry_msgs.msg
from math import pi 
from moveit_commander.conversions import pose_to_list
from math import radians
from tf.transformations import quaternion_from_euler,euler_from_quaternion
from time import sleep
from std_msgs.msg import Int16, Float64,String,Bool
from inputimeout import inputimeout, TimeoutOccurred


text_loc =['Home','Table1','Table2','Table3','Kitchen']


class MoveNode:
    def __init__(self):
        rospy.init_node('move_node')
        self.client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.client.wait_for_server()
        self.cancel_flag = False
        self.cancel_sub = rospy.Subscriber('cancel_flag', Bool, self.cancel_cb)

    def cancel_cb(self, msg):
        self.cancel_flag = msg.data


    def go_to(self, x, y, z):
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.pose.position.x = x
        goal.target_pose.pose.position.y = y
        goal.target_pose.pose.position.z = z
        goal.target_pose.pose.orientation.w = 1.0
        self.client.send_goal(goal)
        wait = self.client.wait_for_result()
        
        # If the result doesn't arrive, assume the Server is not available

        if wait:
            sleep(2)
        # moveit_poses()

        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
        else:
         # Result of executing the action
            
            return self.client.get_result()

    def home_position(self, loc):
        if (loc == 0): 
            rospy.loginfo("Heading to Home")
            self.go_to(0.3327469671548591,-0.07669310109807612,-0.34303521623827754)
        elif(loc == 1):
            rospy.loginfo("Heading to Table 1")
            self.go_to(-0.5745602489172651,-2.7893164804901556,-2.65709415824142)
        elif( loc ==2):
            rospy.loginfo("Heading to Table 2")
            self.go_to(2.57994547476032,-1.925609675033026,-1.5745951272044802)
        elif( loc ==3):
            rospy.loginfo("Heading to Table 3")
            self.go_to(4.3941970305451905,-0.23586030441848677,-0.10364319482621749)
        elif( loc ==4):
            rospy.loginfo("Heading to Kitchen")
            self.go_to(4.190111454705576,2.745814026107766,0.2585562943369818)



    def run(self):
        while not rospy.is_shutdown():
            location = int(input("Enter Table number ( 1,2,3 ): "))
            self.cancel_flag = False
            self.home_position(4)
            sleep(1)
            if self.cancel_flag:
                self.home_position(0)
            elif not self.cancel_flag :
                self.cancel_flag = False
                self.home_position(location)
                if self.cancel_flag:
                    self.home_position(4)
                    self.home_position(0)
                else:
                    self.home_position(0)
            else:
                rospy.logerr("Invalid location number, please enter 1 or 2 or 3" )
            

         

if __name__ == '__main__':
    move_node = MoveNode()
    move_node.run()











